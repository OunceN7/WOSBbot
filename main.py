
import os
import telebot
from telebot import types
from threading import Thread
import time
import json
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GROUP_ID = int(os.getenv("GROUP_ID", "0"))

bot = telebot.TeleBot(TOKEN)
DATA_FILE = "players.json"

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def register_user(user_id, nickname):
    data = load_data()
    for entry in data:
        if entry["id"] == user_id:
            entry["nickname"] = nickname
            entry["status"] = "in"
            save_data(data)
            return
    data.append({
        "id": user_id,
        "nickname": nickname,
        "joined": datetime.utcnow().strftime("%Y-%m-%d"),
        "status": "in"
    })
    save_data(data)

def set_status(user_id, status):
    data = load_data()
    for entry in data:
        if entry["id"] == user_id:
            entry["status"] = status
            break
    save_data(data)

# --- –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—Ä–∞–±–ª—è–º ---
ships_by_class = {
    "–±—ã—Å—Ç—Ä–æ—Ö–æ–¥–Ω—ã–π": ["–°—Ç—Ä–µ–ª–∞", "–ú–æ–ª–Ω–∏—è"],
    "–±–æ–µ–≤—ã–µ": ["–ì—Ä–æ–∑–∞", "–í–∏—Ö—Ä—å"],
    "—Ç–æ—Ä–≥–æ–≤—ã–µ": ["–ö–∞—Ä–∞–≤–µ–ª–ª–∞", "–ì–∞–ª–µ–æ–Ω"],
    "–º–æ—Ä—Ç–∏—Ä–Ω—ã–µ": ["–£—Ä–∞–≥–∞–Ω", "–ü–µ—Å—á–∞–Ω–∏–∫"],
    "—Ç—è–∂—ë–ª—ã–µ": ["–¶–∏—Ç–∞–¥–µ–ª—å", "–ë–∞—Å—Ç–∏–æ–Ω"],
    "–∏–º–ø–µ—Ä—Å–∫–∏–µ": ["–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–¢–∏—Ç–∞–Ω"]
}

ship_builds = {
    "–°—Ç—Ä–µ–ª–∞": ["–ê–≥—Ä–µ—Å—Å–æ—Ä", "–†–∞–∑–≤–µ–¥—á–∏–∫"],
    "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": ["–®—Ç—É—Ä–º", "–û–±–æ—Ä–æ–Ω–∞"]
}

build_details = {
    "–ê–≥—Ä–µ—Å—Å–æ—Ä": "–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞ —Å –ª—ë–≥–∫–æ–π –±—Ä–æ–Ω—ë–π.",
    "–†–∞–∑–≤–µ–¥—á–∏–∫": "–°–∫–æ—Ä–æ—Å—Ç—å –∏ —É–∫–ª–æ–Ω–µ–Ω–∏–µ.",
    "–®—Ç—É—Ä–º": "–ü—Ä–æ–±–∏–≤–Ω–æ–π —É—Ä–æ–Ω, –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞.",
    "–û–±–æ—Ä–æ–Ω–∞": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –∏ –±—Ä–æ–Ω—è."
}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π —É –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –≤ SEA Battles?")
    bot.register_next_step_handler(message, get_nickname)

def get_nickname(message):
    register_user(message.chat.id, message.text)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cls in ships_by_class:
        markup.add(cls)
    if message.chat.id == ADMIN_ID:
        markup.add("üì£ –†–∞—Å—Å—ã–ª–∫–∞")
        markup.add("üë• –ò–≥—Ä–æ–∫–∏")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –∫–æ—Ä–∞–±–ª–µ–π:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ships_by_class)
def handle_class(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for ship in ships_by_class[message.text]:
        markup.add(ship)
    markup.add("‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, f"–ö–æ—Ä–∞–±–ª–∏ –∫–ª–∞—Å—Å–∞ {message.text}:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ship_builds)
def handle_ship(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for build in ship_builds[message.text]:
        markup.add(build)
    markup.add("‚¨Ö –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, f"–°–±–æ—Ä–∫–∏ –¥–ª—è –∫–æ—Ä–∞–±–ª—è {message.text}:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in build_details)
def handle_build(message):
    bot.send_message(message.chat.id, build_details[message.text])

@bot.message_handler(func=lambda msg: msg.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞")
def ask_broadcast(message):
    if message.chat.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, broadcast)

def broadcast(message):
    data = load_data()
    sent = 0
    for entry in data:
        if entry["status"] == "in":
            try:
                member = bot.get_chat_member(GROUP_ID, entry["id"])
                if member.status in ["member", "administrator", "creator"]:
                    bot.send_message(entry["id"], message.text)
                    sent += 1
            except:
                continue
    bot.send_message(ADMIN_ID, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —Å–æ–æ–±—â–µ–Ω–∏–π.")

@bot.message_handler(func=lambda msg: msg.text == "üë• –ò–≥—Ä–æ–∫–∏")
def show_players(message):
    if message.chat.id != ADMIN_ID:
        return
    data = load_data()
    active = [f"- {u['nickname']} ({u['id']}), —Å {u['joined']}" for u in data if u["status"] == "in"]
    left = [f"- {u['nickname']} ({u['id']}), —Å {u['joined']}" for u in data if u["status"] == "left"]
    msg = "‚úÖ –í –≥—Ä—É–ø–ø–µ:\n" + ("\n".join(active) or "‚Äî") + "\n\n‚ùå –í—ã—à–ª–∏:\n" + ("\n".join(left) or "‚Äî")

@bot.message_handler(func=lambda msg: msg.text == "‚¨Ö –ù–∞–∑–∞–¥")
def go_back(message):
    start(message)

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã ---
def check_membership():
    while True:
        try:
            data = load_data()
            for entry in data:
                try:
                    member = bot.get_chat_member(GROUP_ID, entry["id"])
                    if member.status == "left":
                        set_status(entry["id"], "left")
                except:
                    continue
        except:
            pass
        time.sleep(86400)

Thread(target=check_membership, daemon=True).start()

bot.polling()
